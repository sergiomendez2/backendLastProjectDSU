@startuml
package Model {
abstract Player{}
class ListOfPlayer{}
enum TypePlayer
}
package View {
  class HangManView{
        -Player Player 1
        -Player player 2
        -int maxAttempts
        -TurnController
        +getAmountOfPlayers():int
        +HangManView()
        +play()
    }
     class GameView {

            +{abstract} resume()
            +{abstract} play()
            +getPlayer(gamePlayerList getPlayer)
        }

      }
package Controller{
interface gamePlayer{
        +Results(): resume
    }

    interface GamePlayerListProvider{
            +getPlayerList(int total_Players): gamePlayer[]
    }


class hangedManController{
+secreteWordSeparatedByLines:char[]
+separateSecretWordByLine(string secretWord):char[]
+giveHint(string secretWord)
+isSecretWordSeparatedByLine():boolean
}
Interface HangedManPlayer


    class Round{
    +reversePlayer(Player player1, Player player2)
    }
    class TurnController{
         +HangedMan hangedManController
         +init()
         +PlayTurns()
         +printEndGameMessage()
         +isHangedMan
    }

    interface WordGiverable{
        +giveWord():String
    }

    interface WordGuesserable{
        +guesseWord():String
        +tryLetter():char
        +askForHint()
    }


    HangedManPlayer ..|> WordGiverable
    HangedManPlayer ..|> WordGuesserable

    TurnController *-- WordGiverable
    TurnController *-- WordGuesserable
    TurnController *-- hangedManController
    Round *-- TurnController
    HangManView *-- Player
    HangManView ..> "2" Round

gamePlayer..|> HangedManPlayer
Player ..|> gamePlayer
ListOfPlayer ..|> GamePlayerListProvider
GameView..>GamePlayerListProvider
GameView..|>HangManView
GameView ..>gamePlayer
TypePlayer--|>Player

TurnController*--HangedManPlayer

}

@enduml